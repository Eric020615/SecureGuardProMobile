import React from 'react'
import { act, render, waitFor } from '@testing-library/react-native'
import { NotificationProvider } from '@contexts/NotificationContext'
import QrCodePage from '@pages/qr-code/QrCodePage'
import { getQrCode } from '@api/cardService/cardService'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { useCard } from '@store/card/useCard'

jest.mock('@api/cardService/cardService', () => ({
	...jest.requireActual('@api/cardService/cardService'),
	getQrCode: jest.fn().mockReturnValue({
		success: true,
		msg: 'QR Code retrieve successfully!',
		data: {
			badgeNumber: 1,
			data: '',
		},
	}),
}))

jest.mock('@store/card/useCard', () => {
	const originalModule = jest.requireActual('@store/card/useCard') // Retain the original implementation

	return {
		...originalModule, // Keep all the original exports
		useCard: originalModule.useCard, // Keep the original `useCard` store
	}
})

describe('QrCodePage', () => {
	const setup = async () => {
		const utils = render(
			<NotificationProvider>
				<QrCodePage />
			</NotificationProvider>,
		)

		await act(async () => {
			await new Promise((resolve) => setTimeout(resolve, 0)) // Simulate async effects
		})

		return {
			...utils,
		}
	}

	it('verify the no QR code', async () => {
		await waitFor(async () => {
			await AsyncStorage.setItem('card', null)
		})
		const { getByText } = await setup()
		await waitFor(() => {
			expect(getByText('No QR Code found for your account.')).toBeTruthy()
			expect(getByText('Please activate your badge to access with qr code.')).toBeTruthy()
		})
	})

	it('verify the QR code image', async () => {
		await act(async () => {
			await AsyncStorage.setItem('card', '1')
		})
		const { getByTestId } = await setup()
		await waitFor(() => {
			expect(getQrCode).toHaveBeenCalledTimes(1)
			const qrCodeImage = getByTestId('qr-code-image')
			expect(qrCodeImage).toBeTruthy()
		})
	})
})
